
adc_2nd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  000004e6  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ca  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006d2  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001f8  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000054f  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018d  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f7  00000000  00000000  00001759  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ee       	ldi	r30, 0xE6	; 230
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 38       	cpi	r26, 0x8E	; 142
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <main>
  b6:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <calibtemp>:
}

char* calibtemp(int temp_16){
	char* array;

	if(temp_16>=763 && temp_16<802){ //0
  be:	9c 01       	movw	r18, r24
		array = "0";	//"" 쓸땐 시작 주소부터 따옴표안에있는 데이터를 넣어줌->so has to be: address = ""
	}
	if(temp_16>=712 && temp_16<763){ //5
  c0:	88 5c       	subi	r24, 0xC8	; 200
  c2:	92 40       	sbci	r25, 0x02	; 2
  c4:	c3 97       	sbiw	r24, 0x33	; 51
  c6:	18 f4       	brcc	.+6      	; 0xce <calibtemp+0x10>
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	51 e0       	ldi	r21, 0x01	; 1
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <calibtemp+0x14>
  ce:	42 e0       	ldi	r20, 0x02	; 2
  d0:	51 e0       	ldi	r21, 0x01	; 1
		array = "5";
	}
	if(temp_16>=655 && temp_16<712){//10
  d2:	c9 01       	movw	r24, r18
  d4:	8f 58       	subi	r24, 0x8F	; 143
  d6:	92 40       	sbci	r25, 0x02	; 2
  d8:	c9 97       	sbiw	r24, 0x39	; 57
  da:	10 f4       	brcc	.+4      	; 0xe0 <calibtemp+0x22>
  dc:	44 e0       	ldi	r20, 0x04	; 4
  de:	51 e0       	ldi	r21, 0x01	; 1
		array = "10";
	}
	if(temp_16>=629 && temp_16<655){//15
  e0:	c9 01       	movw	r24, r18
  e2:	85 57       	subi	r24, 0x75	; 117
  e4:	92 40       	sbci	r25, 0x02	; 2
  e6:	4a 97       	sbiw	r24, 0x1a	; 26
  e8:	10 f4       	brcc	.+4      	; 0xee <calibtemp+0x30>
  ea:	47 e0       	ldi	r20, 0x07	; 7
  ec:	51 e0       	ldi	r21, 0x01	; 1
		array = "15";
	}
	if(temp_16>=614 && temp_16<629){	//16
  ee:	c9 01       	movw	r24, r18
  f0:	86 56       	subi	r24, 0x66	; 102
  f2:	92 40       	sbci	r25, 0x02	; 2
  f4:	0f 97       	sbiw	r24, 0x0f	; 15
  f6:	10 f4       	brcc	.+4      	; 0xfc <calibtemp+0x3e>
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	51 e0       	ldi	r21, 0x01	; 1
		array = "16";
	}
	if(temp_16>=600 && temp_16<614){	//17
  fc:	c9 01       	movw	r24, r18
  fe:	88 55       	subi	r24, 0x58	; 88
 100:	92 40       	sbci	r25, 0x02	; 2
 102:	0e 97       	sbiw	r24, 0x0e	; 14
 104:	10 f4       	brcc	.+4      	; 0x10a <calibtemp+0x4c>
 106:	4d e0       	ldi	r20, 0x0D	; 13
 108:	51 e0       	ldi	r21, 0x01	; 1
		array = "17";
	}
	if(temp_16>=586 && temp_16<600){	//18
 10a:	c9 01       	movw	r24, r18
 10c:	8a 54       	subi	r24, 0x4A	; 74
 10e:	92 40       	sbci	r25, 0x02	; 2
 110:	0e 97       	sbiw	r24, 0x0e	; 14
 112:	10 f4       	brcc	.+4      	; 0x118 <calibtemp+0x5a>
 114:	40 e1       	ldi	r20, 0x10	; 16
 116:	51 e0       	ldi	r21, 0x01	; 1
		array = "18";
	}
	if(temp_16>=571 && temp_16<586){	//19
 118:	c9 01       	movw	r24, r18
 11a:	8b 53       	subi	r24, 0x3B	; 59
 11c:	92 40       	sbci	r25, 0x02	; 2
 11e:	0f 97       	sbiw	r24, 0x0f	; 15
 120:	10 f4       	brcc	.+4      	; 0x126 <calibtemp+0x68>
 122:	43 e1       	ldi	r20, 0x13	; 19
 124:	51 e0       	ldi	r21, 0x01	; 1
		array = "19";
	}
	if(temp_16>=556 && temp_16<571){	//20
 126:	c9 01       	movw	r24, r18
 128:	8c 52       	subi	r24, 0x2C	; 44
 12a:	92 40       	sbci	r25, 0x02	; 2
 12c:	0f 97       	sbiw	r24, 0x0f	; 15
 12e:	10 f4       	brcc	.+4      	; 0x134 <calibtemp+0x76>
 130:	46 e1       	ldi	r20, 0x16	; 22
 132:	51 e0       	ldi	r21, 0x01	; 1
		array = "20";
	}
	if(temp_16>=545 && temp_16<556){	//21
 134:	c9 01       	movw	r24, r18
 136:	81 52       	subi	r24, 0x21	; 33
 138:	92 40       	sbci	r25, 0x02	; 2
 13a:	0b 97       	sbiw	r24, 0x0b	; 11
 13c:	10 f4       	brcc	.+4      	; 0x142 <calibtemp+0x84>
 13e:	49 e1       	ldi	r20, 0x19	; 25
 140:	51 e0       	ldi	r21, 0x01	; 1
		array = "21";
	}
	if(temp_16>=534 && temp_16<545){	//22
 142:	c9 01       	movw	r24, r18
 144:	86 51       	subi	r24, 0x16	; 22
 146:	92 40       	sbci	r25, 0x02	; 2
 148:	0b 97       	sbiw	r24, 0x0b	; 11
 14a:	10 f4       	brcc	.+4      	; 0x150 <calibtemp+0x92>
 14c:	4c e1       	ldi	r20, 0x1C	; 28
 14e:	51 e0       	ldi	r21, 0x01	; 1
		array = "22";
	}
	if(temp_16>=523 && temp_16<534){	//23
 150:	c9 01       	movw	r24, r18
 152:	8b 50       	subi	r24, 0x0B	; 11
 154:	92 40       	sbci	r25, 0x02	; 2
 156:	0b 97       	sbiw	r24, 0x0b	; 11
 158:	10 f4       	brcc	.+4      	; 0x15e <calibtemp+0xa0>
 15a:	4f e1       	ldi	r20, 0x1F	; 31
 15c:	51 e0       	ldi	r21, 0x01	; 1
		array = "23";
	}
	if(temp_16>=512 && temp_16<523){	//24
 15e:	c9 01       	movw	r24, r18
 160:	80 50       	subi	r24, 0x00	; 0
 162:	92 40       	sbci	r25, 0x02	; 2
 164:	0b 97       	sbiw	r24, 0x0b	; 11
 166:	10 f4       	brcc	.+4      	; 0x16c <calibtemp+0xae>
 168:	42 e2       	ldi	r20, 0x22	; 34
 16a:	51 e0       	ldi	r21, 0x01	; 1
		array = "24";
	}
	if(temp_16>=499 && temp_16<512){	//25
 16c:	c9 01       	movw	r24, r18
 16e:	83 5f       	subi	r24, 0xF3	; 243
 170:	91 40       	sbci	r25, 0x01	; 1
 172:	0d 97       	sbiw	r24, 0x0d	; 13
 174:	10 f4       	brcc	.+4      	; 0x17a <calibtemp+0xbc>
 176:	45 e2       	ldi	r20, 0x25	; 37
 178:	51 e0       	ldi	r21, 0x01	; 1
		array = "25";
	}
	if(temp_16>=488 && temp_16<499){	//26
 17a:	c9 01       	movw	r24, r18
 17c:	88 5e       	subi	r24, 0xE8	; 232
 17e:	91 40       	sbci	r25, 0x01	; 1
 180:	0b 97       	sbiw	r24, 0x0b	; 11
 182:	10 f4       	brcc	.+4      	; 0x188 <calibtemp+0xca>
 184:	48 e2       	ldi	r20, 0x28	; 40
 186:	51 e0       	ldi	r21, 0x01	; 1
		array = "26";
	}
	if(temp_16>=477 && temp_16<488){	//27
 188:	c9 01       	movw	r24, r18
 18a:	8d 5d       	subi	r24, 0xDD	; 221
 18c:	91 40       	sbci	r25, 0x01	; 1
 18e:	0b 97       	sbiw	r24, 0x0b	; 11
 190:	10 f4       	brcc	.+4      	; 0x196 <calibtemp+0xd8>
 192:	4b e2       	ldi	r20, 0x2B	; 43
 194:	51 e0       	ldi	r21, 0x01	; 1
		array = "27";
	}
	if(temp_16>=466 && temp_16<477){	//28
 196:	c9 01       	movw	r24, r18
 198:	82 5d       	subi	r24, 0xD2	; 210
 19a:	91 40       	sbci	r25, 0x01	; 1
 19c:	0b 97       	sbiw	r24, 0x0b	; 11
 19e:	10 f4       	brcc	.+4      	; 0x1a4 <calibtemp+0xe6>
 1a0:	4e e2       	ldi	r20, 0x2E	; 46
 1a2:	51 e0       	ldi	r21, 0x01	; 1
		array = "28";
	}
	if(temp_16>=455 && temp_16<466){	//29
 1a4:	c9 01       	movw	r24, r18
 1a6:	87 5c       	subi	r24, 0xC7	; 199
 1a8:	91 40       	sbci	r25, 0x01	; 1
 1aa:	0b 97       	sbiw	r24, 0x0b	; 11
 1ac:	10 f4       	brcc	.+4      	; 0x1b2 <calibtemp+0xf4>
 1ae:	41 e3       	ldi	r20, 0x31	; 49
 1b0:	51 e0       	ldi	r21, 0x01	; 1
		array = "29";
	}
	if(temp_16>=440 && temp_16<455){	//30
 1b2:	c9 01       	movw	r24, r18
 1b4:	88 5b       	subi	r24, 0xB8	; 184
 1b6:	91 40       	sbci	r25, 0x01	; 1
 1b8:	0f 97       	sbiw	r24, 0x0f	; 15
 1ba:	10 f4       	brcc	.+4      	; 0x1c0 <calibtemp+0x102>
 1bc:	44 e3       	ldi	r20, 0x34	; 52
 1be:	51 e0       	ldi	r21, 0x01	; 1
		array = "30";
	}
	if(temp_16>=436 && temp_16<440){	//31
 1c0:	c9 01       	movw	r24, r18
 1c2:	84 5b       	subi	r24, 0xB4	; 180
 1c4:	91 40       	sbci	r25, 0x01	; 1
 1c6:	04 97       	sbiw	r24, 0x04	; 4
 1c8:	10 f4       	brcc	.+4      	; 0x1ce <calibtemp+0x110>
 1ca:	47 e3       	ldi	r20, 0x37	; 55
 1cc:	51 e0       	ldi	r21, 0x01	; 1
		array = "31";
	}
	if(temp_16>=432 && temp_16<436){	//32
 1ce:	c9 01       	movw	r24, r18
 1d0:	80 5b       	subi	r24, 0xB0	; 176
 1d2:	91 40       	sbci	r25, 0x01	; 1
 1d4:	04 97       	sbiw	r24, 0x04	; 4
 1d6:	10 f4       	brcc	.+4      	; 0x1dc <calibtemp+0x11e>
 1d8:	4a e3       	ldi	r20, 0x3A	; 58
 1da:	51 e0       	ldi	r21, 0x01	; 1
		array = "32";
	}
	if(temp_16>=428 && temp_16<432){	//33
 1dc:	c9 01       	movw	r24, r18
 1de:	8c 5a       	subi	r24, 0xAC	; 172
 1e0:	91 40       	sbci	r25, 0x01	; 1
 1e2:	04 97       	sbiw	r24, 0x04	; 4
 1e4:	10 f4       	brcc	.+4      	; 0x1ea <calibtemp+0x12c>
 1e6:	4d e3       	ldi	r20, 0x3D	; 61
 1e8:	51 e0       	ldi	r21, 0x01	; 1
		array = "33";
	}
	if(temp_16>=423 && temp_16<428){	//34
 1ea:	c9 01       	movw	r24, r18
 1ec:	87 5a       	subi	r24, 0xA7	; 167
 1ee:	91 40       	sbci	r25, 0x01	; 1
 1f0:	05 97       	sbiw	r24, 0x05	; 5
 1f2:	10 f4       	brcc	.+4      	; 0x1f8 <calibtemp+0x13a>
 1f4:	40 e4       	ldi	r20, 0x40	; 64
 1f6:	51 e0       	ldi	r21, 0x01	; 1
		array = "34";
	}
	if(temp_16>=418 && temp_16<423){	//35
 1f8:	c9 01       	movw	r24, r18
 1fa:	82 5a       	subi	r24, 0xA2	; 162
 1fc:	91 40       	sbci	r25, 0x01	; 1
 1fe:	05 97       	sbiw	r24, 0x05	; 5
 200:	10 f4       	brcc	.+4      	; 0x206 <calibtemp+0x148>
 202:	43 e4       	ldi	r20, 0x43	; 67
 204:	51 e0       	ldi	r21, 0x01	; 1
		array = "35";
	}
	if(temp_16>=413 && temp_16<418){	//36
 206:	c9 01       	movw	r24, r18
 208:	8d 59       	subi	r24, 0x9D	; 157
 20a:	91 40       	sbci	r25, 0x01	; 1
 20c:	05 97       	sbiw	r24, 0x05	; 5
 20e:	10 f4       	brcc	.+4      	; 0x214 <calibtemp+0x156>
 210:	46 e4       	ldi	r20, 0x46	; 70
 212:	51 e0       	ldi	r21, 0x01	; 1
		array = "36";
	}
	if(temp_16>=392 && temp_16<413){	//37
 214:	c9 01       	movw	r24, r18
 216:	88 58       	subi	r24, 0x88	; 136
 218:	91 40       	sbci	r25, 0x01	; 1
 21a:	45 97       	sbiw	r24, 0x15	; 21
 21c:	10 f4       	brcc	.+4      	; 0x222 <calibtemp+0x164>
 21e:	49 e4       	ldi	r20, 0x49	; 73
 220:	51 e0       	ldi	r21, 0x01	; 1
		array = "37";
	}
	if(temp_16>=371 && temp_16<392){	//38
 222:	c9 01       	movw	r24, r18
 224:	83 57       	subi	r24, 0x73	; 115
 226:	91 40       	sbci	r25, 0x01	; 1
 228:	45 97       	sbiw	r24, 0x15	; 21
 22a:	10 f4       	brcc	.+4      	; 0x230 <calibtemp+0x172>
 22c:	4c e4       	ldi	r20, 0x4C	; 76
 22e:	51 e0       	ldi	r21, 0x01	; 1
		array = "38";
	}
	if(temp_16>=350 && temp_16<371){	//39
 230:	c9 01       	movw	r24, r18
 232:	8e 55       	subi	r24, 0x5E	; 94
 234:	91 40       	sbci	r25, 0x01	; 1
 236:	45 97       	sbiw	r24, 0x15	; 21
 238:	10 f4       	brcc	.+4      	; 0x23e <calibtemp+0x180>
 23a:	4f e4       	ldi	r20, 0x4F	; 79
 23c:	51 e0       	ldi	r21, 0x01	; 1
		array = "39";
	}
	if(temp_16>=328 && temp_16<350){	//40
 23e:	c9 01       	movw	r24, r18
 240:	88 54       	subi	r24, 0x48	; 72
 242:	91 40       	sbci	r25, 0x01	; 1
 244:	46 97       	sbiw	r24, 0x16	; 22
 246:	10 f4       	brcc	.+4      	; 0x24c <calibtemp+0x18e>
 248:	42 e5       	ldi	r20, 0x52	; 82
 24a:	51 e0       	ldi	r21, 0x01	; 1
		array = "40";
	}
	if(temp_16>=283 && temp_16<328){	//45
 24c:	c9 01       	movw	r24, r18
 24e:	8b 51       	subi	r24, 0x1B	; 27
 250:	91 40       	sbci	r25, 0x01	; 1
 252:	8d 97       	sbiw	r24, 0x2d	; 45
 254:	10 f4       	brcc	.+4      	; 0x25a <calibtemp+0x19c>
 256:	45 e5       	ldi	r20, 0x55	; 85
 258:	51 e0       	ldi	r21, 0x01	; 1
		array = "45";
	}
	if(temp_16>=244 && temp_16<283){	//50
 25a:	c9 01       	movw	r24, r18
 25c:	84 5f       	subi	r24, 0xF4	; 244
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	87 97       	sbiw	r24, 0x27	; 39
 262:	10 f4       	brcc	.+4      	; 0x268 <calibtemp+0x1aa>
 264:	48 e5       	ldi	r20, 0x58	; 88
 266:	51 e0       	ldi	r21, 0x01	; 1
		array = "50";
	}
	if(temp_16>=209 && temp_16<244){	//55
 268:	c9 01       	movw	r24, r18
 26a:	81 5d       	subi	r24, 0xD1	; 209
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	83 97       	sbiw	r24, 0x23	; 35
 270:	10 f4       	brcc	.+4      	; 0x276 <calibtemp+0x1b8>
 272:	4b e5       	ldi	r20, 0x5B	; 91
 274:	51 e0       	ldi	r21, 0x01	; 1
		array = "55";
	}
	if(temp_16>=179 && temp_16<209){	//60
 276:	c9 01       	movw	r24, r18
 278:	83 5b       	subi	r24, 0xB3	; 179
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	4e 97       	sbiw	r24, 0x1e	; 30
 27e:	10 f4       	brcc	.+4      	; 0x284 <calibtemp+0x1c6>
 280:	4e e5       	ldi	r20, 0x5E	; 94
 282:	51 e0       	ldi	r21, 0x01	; 1
		array = "60";
	}
	if(temp_16>=153 && temp_16<179){	//65
 284:	c9 01       	movw	r24, r18
 286:	89 59       	subi	r24, 0x99	; 153
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	4a 97       	sbiw	r24, 0x1a	; 26
 28c:	10 f4       	brcc	.+4      	; 0x292 <calibtemp+0x1d4>
 28e:	41 e6       	ldi	r20, 0x61	; 97
 290:	51 e0       	ldi	r21, 0x01	; 1
		array = "65";
	}
	if(temp_16>=131 && temp_16<153){	//70
 292:	c9 01       	movw	r24, r18
 294:	83 58       	subi	r24, 0x83	; 131
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	46 97       	sbiw	r24, 0x16	; 22
 29a:	10 f4       	brcc	.+4      	; 0x2a0 <calibtemp+0x1e2>
 29c:	44 e6       	ldi	r20, 0x64	; 100
 29e:	51 e0       	ldi	r21, 0x01	; 1
		array = "70";
	}
	if(temp_16>=112 && temp_16<131){	//75
 2a0:	c9 01       	movw	r24, r18
 2a2:	80 57       	subi	r24, 0x70	; 112
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	43 97       	sbiw	r24, 0x13	; 19
 2a8:	10 f4       	brcc	.+4      	; 0x2ae <calibtemp+0x1f0>
 2aa:	47 e6       	ldi	r20, 0x67	; 103
 2ac:	51 e0       	ldi	r21, 0x01	; 1
		array = "75";
	}
	if(temp_16>=93 && temp_16<112){	//80
 2ae:	2d 55       	subi	r18, 0x5D	; 93
 2b0:	30 40       	sbci	r19, 0x00	; 0
 2b2:	23 31       	cpi	r18, 0x13	; 19
 2b4:	31 05       	cpc	r19, r1
 2b6:	10 f4       	brcc	.+4      	; 0x2bc <calibtemp+0x1fe>
 2b8:	4a e6       	ldi	r20, 0x6A	; 106
 2ba:	51 e0       	ldi	r21, 0x01	; 1
		array = "80";
	}
	return array;
}
 2bc:	ca 01       	movw	r24, r20
 2be:	08 95       	ret

000002c0 <LCD_Command>:
	_delay_ms(2);
}


void LCD_Command(char ch){
  	LCD_CTRL &= 0xf9; //write instruction
 2c0:	e5 e6       	ldi	r30, 0x65	; 101
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	90 81       	ld	r25, Z
 2c6:	99 7f       	andi	r25, 0xF9	; 249
 2c8:	90 83       	st	Z, r25
  	LCD_CTRL |= 0x01; //LCD enable
 2ca:	90 81       	ld	r25, Z
 2cc:	91 60       	ori	r25, 0x01	; 1
 2ce:	90 83       	st	Z, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2d0:	90 e1       	ldi	r25, 0x10	; 16
 2d2:	29 2f       	mov	r18, r25
 2d4:	2a 95       	dec	r18
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_Command+0x14>
  	_delay_us(50);
  	LCD_WINST = ch; //write instruction
 2d8:	8b bb       	out	0x1b, r24	; 27
 2da:	9a 95       	dec	r25
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_Command+0x1a>
 	_delay_us(50);
 	LCD_CTRL &= 0xfe; //LCD disable
 2de:	80 81       	ld	r24, Z
 2e0:	8e 7f       	andi	r24, 0xFE	; 254
 2e2:	80 83       	st	Z, r24
}
 2e4:	08 95       	ret

000002e6 <LCD_init>:
void LCD_Clear(void){
	LCD_Command(0x01); //LCD CLEAR
 	_delay_ms(2);
}

void LCD_init(void){
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
	DDRA = 0xFF;
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0xFF;
 2ee:	80 93 64 00 	sts	0x0064, r24
	LCD_Command(0x38);
 2f2:	88 e3       	ldi	r24, 0x38	; 56
 2f4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f8:	04 ef       	ldi	r16, 0xF4	; 244
 2fa:	11 e0       	ldi	r17, 0x01	; 1
 2fc:	c8 01       	movw	r24, r16
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_init+0x18>
	_delay_ms(2);
	LCD_Command(0x38);
 302:	88 e3       	ldi	r24, 0x38	; 56
 304:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Command>
 308:	c8 01       	movw	r24, r16
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_init+0x24>
	_delay_ms(2);
	LCD_Command(0x38);
 30e:	88 e3       	ldi	r24, 0x38	; 56
 310:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Command>
 314:	c8 01       	movw	r24, r16
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <LCD_init+0x30>
	_delay_ms(2);
	LCD_Command(0x0D);
 31a:	8d e0       	ldi	r24, 0x0D	; 13
 31c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Command>
 320:	c8 01       	movw	r24, r16
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <LCD_init+0x3c>
	_delay_ms(2);
	LCD_Command(0x01);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Command>
 32c:	c8 01       	movw	r24, r16
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_init+0x48>
	_delay_ms(2);
	LCD_Command(0x06);
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Command>
 338:	c8 01       	movw	r24, r16
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_init+0x54>
	_delay_ms(2);
}
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	08 95       	ret

00000344 <sys_init>:
	}
}

void sys_init(void)
{
	LCD_init();
 344:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_init>
 348:	84 ef       	ldi	r24, 0xF4	; 244
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <sys_init+0x8>
	LCD_Command(0x80 |(row*0x40+col));
	_delay_ms(1);
}

void adc_init(void){
	ADMUX = 0x41;	//ADLAR = 0	
 350:	81 e4       	ldi	r24, 0x41	; 65
 352:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x83;	// 1/8 system clock, adc enable, conversion disable
 354:	83 e8       	ldi	r24, 0x83	; 131
 356:	86 b9       	out	0x06, r24	; 6
void sys_init(void)
{
	LCD_init();
	_delay_ms(2);
	adc_init();
}
 358:	08 95       	ret

0000035a <LCD_Clear>:
	LCD_Data(ch);
	_delay_ms(2);
}

void LCD_Clear(void){
	LCD_Command(0x01); //LCD CLEAR
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Command>
 360:	84 ef       	ldi	r24, 0xF4	; 244
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_Clear+0xa>
 	_delay_ms(2);
}
 368:	08 95       	ret

0000036a <LCD_Data>:
 	LCD_CTRL &= 0xfe; //LCD disable
}


void LCD_Data(char ch){
 	LCD_CTRL |= 0x04; //set as DR
 36a:	90 91 65 00 	lds	r25, 0x0065
 36e:	94 60       	ori	r25, 0x04	; 4
 370:	90 93 65 00 	sts	0x0065, r25
 	LCD_CTRL &= 0xfd; //write
 374:	90 91 65 00 	lds	r25, 0x0065
 378:	9d 7f       	andi	r25, 0xFD	; 253
 37a:	90 93 65 00 	sts	0x0065, r25
 	LCD_CTRL |= 0x01; //LCD enable
 37e:	90 91 65 00 	lds	r25, 0x0065
 382:	91 60       	ori	r25, 0x01	; 1
 384:	90 93 65 00 	sts	0x0065, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 388:	90 e1       	ldi	r25, 0x10	; 16
 38a:	9a 95       	dec	r25
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_Data+0x20>
 	_delay_us(50);
	 LCD_WDATA = ch; //write data
 38e:	8b bb       	out	0x1b, r24	; 27
 390:	80 ee       	ldi	r24, 0xE0	; 224
 392:	9e e2       	ldi	r25, 0x2E	; 46
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 394:	29 e1       	ldi	r18, 0x19	; 25
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_Data+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 39e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a0:	d9 f7       	brne	.-10     	; 0x398 <LCD_Data+0x2e>
 	_delay_us(1200000);
 	LCD_CTRL &= 0xfe; //LCD disable
 3a2:	80 91 65 00 	lds	r24, 0x0065
 3a6:	8e 7f       	andi	r24, 0xFE	; 254
 3a8:	80 93 65 00 	sts	0x0065, r24
}
 3ac:	08 95       	ret

000003ae <LCD_OutChar>:
		str++;
	}
}

void LCD_OutChar(char ch){
	LCD_Data(ch);
 3ae:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Data>
 3b2:	84 ef       	ldi	r24, 0xF4	; 244
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCD_OutChar+0x8>
	_delay_ms(2);
}
 3ba:	08 95       	ret

000003bc <displayASCII>:
	}
	return array;
}

void displayASCII(int temp_16)
{
 3bc:	1f 93       	push	r17
 3be:	df 93       	push	r29
 3c0:	cf 93       	push	r28
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	63 97       	sbiw	r28, 0x13	; 19
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	9c 01       	movw	r18, r24
	unsigned char temp[3];
	unsigned char asc_hex[16]={0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46};
 3d4:	de 01       	movw	r26, r28
 3d6:	14 96       	adiw	r26, 0x04	; 4
 3d8:	ed e7       	ldi	r30, 0x7D	; 125
 3da:	f1 e0       	ldi	r31, 0x01	; 1
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	01 90       	ld	r0, Z+
 3e0:	0d 92       	st	X+, r0
 3e2:	81 50       	subi	r24, 0x01	; 1
 3e4:	e1 f7       	brne	.-8      	; 0x3de <displayASCII+0x22>
	int	i;
	
	i=temp_16;
	
	i=i>>8;
	temp[0]=asc_hex[i];
 3e6:	e3 2f       	mov	r30, r19
 3e8:	ff 27       	eor	r31, r31
 3ea:	e7 fd       	sbrc	r30, 7
 3ec:	fa 95       	dec	r31
 3ee:	de 01       	movw	r26, r28
 3f0:	14 96       	adiw	r26, 0x04	; 4
 3f2:	ea 0f       	add	r30, r26
 3f4:	fb 1f       	adc	r31, r27
 3f6:	80 81       	ld	r24, Z
 3f8:	89 83       	std	Y+1, r24	; 0x01

	i=temp_16 & 0x00f0;
 3fa:	f9 01       	movw	r30, r18
 3fc:	e0 7f       	andi	r30, 0xF0	; 240
 3fe:	f0 70       	andi	r31, 0x00	; 0
	i=i>>4;
	temp[1]=asc_hex[i];
 400:	94 e0       	ldi	r25, 0x04	; 4
 402:	f5 95       	asr	r31
 404:	e7 95       	ror	r30
 406:	9a 95       	dec	r25
 408:	e1 f7       	brne	.-8      	; 0x402 <displayASCII+0x46>
 40a:	ea 0f       	add	r30, r26
 40c:	fb 1f       	adc	r31, r27
 40e:	90 81       	ld	r25, Z
 410:	9a 83       	std	Y+2, r25	; 0x02

	i=temp_16 & 0x000f;
	temp[2]=asc_hex[i];
 412:	2f 70       	andi	r18, 0x0F	; 15
 414:	30 70       	andi	r19, 0x00	; 0
 416:	a2 0f       	add	r26, r18
 418:	b3 1f       	adc	r27, r19
 41a:	1c 91       	ld	r17, X
 41c:	1b 83       	std	Y+3, r17	; 0x03

	for(i=0; i<3; i++)
	{
		LCD_OutChar(temp[i]);
 41e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_OutChar>
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_OutChar>
 428:	81 2f       	mov	r24, r17
 42a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_OutChar>
	}
	
}
 42e:	63 96       	adiw	r28, 0x13	; 19
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	cf 91       	pop	r28
 43c:	df 91       	pop	r29
 43e:	1f 91       	pop	r17
 440:	08 95       	ret

00000442 <LCD_OutString>:

void LCD_OutString(char *str){
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ec 01       	movw	r28, r24
 448:	03 c0       	rjmp	.+6      	; 0x450 <LCD_OutString+0xe>
	while(*str != 0){
		LCD_Data(*str);
 44a:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Data>
		str++;
 44e:	21 96       	adiw	r28, 0x01	; 1
	}
	
}

void LCD_OutString(char *str){
	while(*str != 0){
 450:	88 81       	ld	r24, Y
 452:	88 23       	and	r24, r24
 454:	d1 f7       	brne	.-12     	; 0x44a <LCD_OutString+0x8>
		LCD_Data(*str);
		str++;
	}
}
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <LCD_Pos>:
 	_delay_us(1200000);
 	LCD_CTRL &= 0xfe; //LCD disable
}

void LCD_Pos(unsigned char row, unsigned char col){ //LCD position
	LCD_Command(0x80 |(row*0x40+col));
 45c:	82 95       	swap	r24
 45e:	88 0f       	add	r24, r24
 460:	88 0f       	add	r24, r24
 462:	80 7c       	andi	r24, 0xC0	; 192
 464:	86 0f       	add	r24, r22
 466:	80 68       	ori	r24, 0x80	; 128
 468:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_Command>
 46c:	8a ef       	ldi	r24, 0xFA	; 250
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <LCD_Pos+0x14>
	_delay_ms(1);
}
 474:	08 95       	ret

00000476 <displaytemp>:
	LCD_init();
	_delay_ms(2);
	adc_init();
}
void displaytemp(void)
{
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
	int temp_16;
	char* a;

	LCD_Pos(0,0);	
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_Pos>
	temp_16 = ADC & 0x03FF;
 482:	04 b1       	in	r16, 0x04	; 4
 484:	15 b1       	in	r17, 0x05	; 5
 486:	13 70       	andi	r17, 0x03	; 3
	displayASCII(temp_16);
 488:	c8 01       	movw	r24, r16
 48a:	0e 94 de 01 	call	0x3bc	; 0x3bc <displayASCII>
	LCD_Pos(1,0);
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_Pos>

	a = calibtemp(temp_16);
 496:	c8 01       	movw	r24, r16
 498:	0e 94 5f 00 	call	0xbe	; 0xbe <calibtemp>
 49c:	8c 01       	movw	r16, r24

	LCD_OutString("approx ");
 49e:	8d e6       	ldi	r24, 0x6D	; 109
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 21 02 	call	0x442	; 0x442 <LCD_OutString>
	LCD_OutString(a);
 4a6:	c8 01       	movw	r24, r16
 4a8:	0e 94 21 02 	call	0x442	; 0x442 <LCD_OutString>
	LCD_OutString("degreeC");
 4ac:	85 e7       	ldi	r24, 0x75	; 117
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 21 02 	call	0x442	; 0x442 <LCD_OutString>
}
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <main>:
void displaytemp(void);
void displayASCII(int temp_16);
char* calibtemp(int temp_16);	

void main(void)
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
	unsigned char tmp;

	sys_init();
 4be:	0e 94 a2 01 	call	0x344	; 0x344 <sys_init>
 4c2:	ca ef       	ldi	r28, 0xFA	; 250
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1)
	{	
		ADCSRA |= 0x40;	//enable conversion	
 4c6:	36 9a       	sbi	0x06, 6	; 6
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <main+0x10>
		_delay_ms(1);

		tmp=1;
		while(tmp)
 4ce:	36 99       	sbic	0x06, 6	; 6
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <main+0x14>
		{
			tmp = ADCSRA;
			tmp &= 0x40;
		}
		displaytemp();
 4d2:	0e 94 3b 02 	call	0x476	; 0x476 <displaytemp>
 4d6:	f7 cf       	rjmp	.-18     	; 0x4c6 <main+0xc>

000004d8 <adc_init>:
	LCD_Command(0x80 |(row*0x40+col));
	_delay_ms(1);
}

void adc_init(void){
	ADMUX = 0x41;	//ADLAR = 0	
 4d8:	81 e4       	ldi	r24, 0x41	; 65
 4da:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x83;	// 1/8 system clock, adc enable, conversion disable
 4dc:	83 e8       	ldi	r24, 0x83	; 131
 4de:	86 b9       	out	0x06, r24	; 6
}
 4e0:	08 95       	ret

000004e2 <_exit>:
 4e2:	f8 94       	cli

000004e4 <__stop_program>:
 4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <__stop_program>
