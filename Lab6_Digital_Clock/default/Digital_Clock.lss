
Digital_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000006da  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800114  00800114  00000782  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c5  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094c  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020d  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000090a  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000232  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fb  00000000  00000000  0000216e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002369  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_12>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Timer16_init>:
	Timer16_init();
	_delay_ms(2);
}

void Timer16_init(void){
	TCCR1A = 0x00;	// CTC mode, ignore else
  ce:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x0C; // 256분주, ignore capture, OCR
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	8e bd       	out	0x2e, r24	; 46
	SREG = 0x80;
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	8f bf       	out	0x3f, r24	; 63
	TIMSK = 0x10; //CTC interrupt enable, ignore else
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	87 bf       	out	0x37, r24	; 55
	TIFR = 0x10; //TCNT1 OCR1A 비교일치 interrupt
  dc:	86 bf       	out	0x36, r24	; 54
}
  de:	08 95       	ret

000000e0 <decrementTime>:
}


void decrementTime(void){
	
}
  e0:	08 95       	ret

000000e2 <Keypad_init>:

void Keypad_init(void)
{
	DDRC = 0x15; //set input outputs of C pins
  e2:	85 e1       	ldi	r24, 0x15	; 21
  e4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xEF; //set outputs to ground ->needs to be 1 in order to block the interrupt: set col3 to 0
  e6:	8f ee       	ldi	r24, 0xEF	; 239
  e8:	85 bb       	out	0x15, r24	; 21
	SREG = 0x80;  //status bit -> enable external interrupt
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	8f bf       	out	0x3f, r24	; 63
	EICRA = 0x02; //interrupt enable at falling edge
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 6a 00 	sts	0x006A, r24
	EIMSK = 0x01; //enable INT0
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	89 bf       	out	0x39, r24	; 57
}
  f8:	08 95       	ret

000000fa <LCD_Command>:
	}LCD_OutChar(*str);
}


void LCD_Command(char ch){
	LCD_CTRL &= 0xf9; //write instruction
  fa:	e5 e6       	ldi	r30, 0x65	; 101
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	99 7f       	andi	r25, 0xF9	; 249
 102:	90 83       	st	Z, r25
	LCD_CTRL |= 0x01; //LCD enable
 104:	90 81       	ld	r25, Z
 106:	91 60       	ori	r25, 0x01	; 1
 108:	90 83       	st	Z, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 10a:	90 e1       	ldi	r25, 0x10	; 16
 10c:	29 2f       	mov	r18, r25
 10e:	2a 95       	dec	r18
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_Command+0x14>
	_delay_us(50);
	LCD_WINST = ch; //write instruction
 112:	8b bb       	out	0x1b, r24	; 27
 114:	9a 95       	dec	r25
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_Command+0x1a>
	_delay_us(50);
	LCD_CTRL &= 0xfe; //LCD disable
 118:	80 81       	ld	r24, Z
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	80 83       	st	Z, r24
}
 11e:	08 95       	ret

00000120 <LCD_Clear>:
  	LCD_Command(0x06); //increment cursor by one to right (entry mode set)
  	_delay_ms(2);        
}

void LCD_Clear(void){
	LCD_Command(0x01); //LCD CLEAR
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 126:	84 ef       	ldi	r24, 0xF4	; 244
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Clear+0xa>
	_delay_ms(2);
}
 12e:	08 95       	ret

00000130 <LCD_init>:
	SREG = 0x80;  //status bit -> enable external interrupt
	EICRA = 0x02; //interrupt enable at falling edge
	EIMSK = 0x01; //enable INT0
}

void LCD_init(void){
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
	DDRA = 0xFF;        //set all ports A and G as outputs
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0x07;
 138:	87 e0       	ldi	r24, 0x07	; 7
 13a:	80 93 64 00 	sts	0x0064, r24
	LCD_Command(0x38); //set LCD as 2line 5*7dot
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Command>
 144:	04 ef       	ldi	r16, 0xF4	; 244
 146:	11 e0       	ldi	r17, 0x01	; 1
 148:	c8 01       	movw	r24, r16
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_init+0x1a>
	_delay_ms(2);
	LCD_Command(0x38);
 14e:	88 e3       	ldi	r24, 0x38	; 56
 150:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Command>
 154:	c8 01       	movw	r24, r16
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_init+0x26>
	_delay_ms(2);
	LCD_Command(0x38);
 15a:	88 e3       	ldi	r24, 0x38	; 56
 15c:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Command>
 160:	c8 01       	movw	r24, r16
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_init+0x32>
	_delay_ms(2);
	LCD_Command(0x0e); //display on, cursur on, no blinking
 166:	8e e0       	ldi	r24, 0x0E	; 14
 168:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Command>
 16c:	c8 01       	movw	r24, r16
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_init+0x3e>
	_delay_ms(2);		  
	LCD_Command(0x01); //LCD CLEAR
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Command>
 178:	c8 01       	movw	r24, r16
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_init+0x4a>
  	_delay_ms(2);
  	LCD_Command(0x06); //increment cursor by one to right (entry mode set)
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Command>
 184:	c8 01       	movw	r24, r16
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_init+0x56>
  	_delay_ms(2);        
}
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <System_init>:
		}
	}
	TIflag=0;
}

void System_init(void){
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
	LCD_Command(0x80 |(row*0x40+col));
	_delay_ms(1);
}

void SevenSeg_init(void){
	DDRD = 0xFE;
 194:	8e ef       	ldi	r24, 0xFE	; 254
 196:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xFF;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	82 bb       	out	0x12, r24	; 18
 19c:	04 ef       	ldi	r16, 0xF4	; 244
 19e:	11 e0       	ldi	r17, 0x01	; 1
 1a0:	c8 01       	movw	r24, r16
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <System_init+0x12>
}

void System_init(void){
	SevenSeg_init();
	_delay_ms(2);
	LCD_init();
 1a6:	0e 94 98 00 	call	0x130	; 0x130 <LCD_init>
 1aa:	c8 01       	movw	r24, r16
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <System_init+0x1c>
	
}

void Keypad_init(void)
{
	DDRC = 0x15; //set input outputs of C pins
 1b0:	85 e1       	ldi	r24, 0x15	; 21
 1b2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xEF; //set outputs to ground ->needs to be 1 in order to block the interrupt: set col3 to 0
 1b4:	8f ee       	ldi	r24, 0xEF	; 239
 1b6:	85 bb       	out	0x15, r24	; 21
	SREG = 0x80;  //status bit -> enable external interrupt
 1b8:	90 e8       	ldi	r25, 0x80	; 128
 1ba:	9f bf       	out	0x3f, r25	; 63
	EICRA = 0x02; //interrupt enable at falling edge
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	80 93 6a 00 	sts	0x006A, r24
	EIMSK = 0x01; //enable INT0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	89 bf       	out	0x39, r24	; 57
 1c6:	f8 01       	movw	r30, r16
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <System_init+0x38>
	Timer16_init();
	_delay_ms(2);
}

void Timer16_init(void){
	TCCR1A = 0x00;	// CTC mode, ignore else
 1cc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x0C; // 256분주, ignore capture, OCR
 1ce:	8c e0       	ldi	r24, 0x0C	; 12
 1d0:	8e bd       	out	0x2e, r24	; 46
	SREG = 0x80;
 1d2:	9f bf       	out	0x3f, r25	; 63
	TIMSK = 0x10; //CTC interrupt enable, ignore else
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	87 bf       	out	0x37, r24	; 55
	TIFR = 0x10; //TCNT1 OCR1A 비교일치 interrupt
 1d8:	86 bf       	out	0x36, r24	; 54
 1da:	c8 01       	movw	r24, r16
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <System_init+0x4c>
	_delay_ms(2);
	Keypad_init();
	_delay_ms(2);
	Timer16_init();
	_delay_ms(2);
}
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <LCD_Data>:
	_delay_us(50);
	LCD_CTRL &= 0xfe; //LCD disable
}

void LCD_Data(char ch){
  	LCD_CTRL |= 0x04; //set as DR
 1e6:	e5 e6       	ldi	r30, 0x65	; 101
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	90 81       	ld	r25, Z
 1ec:	94 60       	ori	r25, 0x04	; 4
 1ee:	90 83       	st	Z, r25
  	LCD_CTRL &= 0xfd; //write
 1f0:	90 81       	ld	r25, Z
 1f2:	9d 7f       	andi	r25, 0xFD	; 253
 1f4:	90 83       	st	Z, r25
  	LCD_CTRL |= 0x01; //LCD enable
 1f6:	90 81       	ld	r25, Z
 1f8:	91 60       	ori	r25, 0x01	; 1
 1fa:	90 83       	st	Z, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1fc:	90 e1       	ldi	r25, 0x10	; 16
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_Data+0x18>
  	_delay_us(50);
  	LCD_WDATA = ch; //write data
 202:	8b bb       	out	0x1b, r24	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 204:	82 ee       	ldi	r24, 0xE2	; 226
 206:	94 e0       	ldi	r25, 0x04	; 4
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_Data+0x22>
  	_delay_us(5000);
  	LCD_CTRL &= 0xfe; //LCD disable
 20c:	80 81       	ld	r24, Z
 20e:	8e 7f       	andi	r24, 0xFE	; 254
 210:	80 83       	st	Z, r24
}
 212:	08 95       	ret

00000214 <LCD_OutString>:
void LCD_OutChar(char ch){
	LCD_Data(ch);
	_delay_ms(2);
}

void LCD_OutString(char *str){
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	03 c0       	rjmp	.+6      	; 0x222 <LCD_OutString+0xe>
	while(*str != 0){
		LCD_Data(*str);
 21c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Data>
		str++;
 220:	21 96       	adiw	r28, 0x01	; 1
	LCD_Data(ch);
	_delay_ms(2);
}

void LCD_OutString(char *str){
	while(*str != 0){
 222:	88 81       	ld	r24, Y
 224:	88 23       	and	r24, r24
 226:	d1 f7       	brne	.-12     	; 0x21c <LCD_OutString+0x8>
		LCD_Data(*str);
		str++;
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <main>:
unsigned char TIflag;
int p = 0;

void main(void){
	
	System_init();
 22e:	0e 94 c8 00 	call	0x190	; 0x190 <System_init>
	LCD_OutString("PM 11:49:55");	//default AM 09:00 
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_OutString>
 	
	APM = 80;
 23a:	80 e5       	ldi	r24, 0x50	; 80
 23c:	80 93 1e 01 	sts	0x011E, r24
	sec1=sec2=53;
 240:	85 e3       	ldi	r24, 0x35	; 53
 242:	80 93 18 01 	sts	0x0118, r24
 246:	80 93 1d 01 	sts	0x011D, r24
	min1=57;
 24a:	89 e3       	ldi	r24, 0x39	; 57
 24c:	80 93 1c 01 	sts	0x011C, r24
	min2=52;
 250:	84 e3       	ldi	r24, 0x34	; 52
 252:	80 93 1f 01 	sts	0x011F, r24
	hour1=49;
 256:	81 e3       	ldi	r24, 0x31	; 49
 258:	80 93 19 01 	sts	0x0119, r24
	hour2=49;
 25c:	80 93 1b 01 	sts	0x011B, r24

	while(1){	
		OCR1A = 31250; 
 260:	82 e1       	ldi	r24, 0x12	; 18
 262:	9a e7       	ldi	r25, 0x7A	; 122
 264:	9b bd       	out	0x2b, r25	; 43
 266:	8a bd       	out	0x2a, r24	; 42
 268:	fd cf       	rjmp	.-6      	; 0x264 <main+0x36>

0000026a <LCD_OutChar>:
	LCD_Command(0x01); //LCD CLEAR
	_delay_ms(2);
}

void LCD_OutChar(char ch){
	LCD_Data(ch);
 26a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Data>
 26e:	84 ef       	ldi	r24, 0xF4	; 244
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_OutChar+0x8>
	_delay_ms(2);
}
 276:	08 95       	ret

00000278 <LCD_OutStringLShift>:
		LCD_Data(*str);
		str++;
	}
}

void LCD_OutStringLShift(char *str){ //LCD_OutString_Left_Shift
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
 282:	0c e4       	ldi	r16, 0x4C	; 76
 284:	1d e1       	ldi	r17, 0x1D	; 29
 286:	0c c0       	rjmp	.+24     	; 0x2a0 <LCD_OutStringLShift+0x28>
	char* i = str;
	i++;
	while(*(i++) != 0){
		LCD_Data(*str);
 288:	89 91       	ld	r24, Y+
 28a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Data>
 28e:	c8 01       	movw	r24, r16
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_OutStringLShift+0x18>
		_delay_ms(30);
		LCD_Command(0x18);
 294:	88 e1       	ldi	r24, 0x18	; 24
 296:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Command>
 29a:	c8 01       	movw	r24, r16
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_OutStringLShift+0x24>
}

void LCD_OutStringLShift(char *str){ //LCD_OutString_Left_Shift
	char* i = str;
	i++;
	while(*(i++) != 0){
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	88 23       	and	r24, r24
 2a4:	89 f7       	brne	.-30     	; 0x288 <LCD_OutStringLShift+0x10>
		LCD_Data(*str);
		_delay_ms(30);
		LCD_Command(0x18);
		_delay_ms(30);
		str++;
	}LCD_OutChar(*str);
 2a6:	88 81       	ld	r24, Y
 2a8:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <LCD_Pos>:
  	_delay_us(5000);
  	LCD_CTRL &= 0xfe; //LCD disable
}

void LCD_Pos(unsigned char row, unsigned char col){ //LCD position
	LCD_Command(0x80 |(row*0x40+col));
 2b6:	82 95       	swap	r24
 2b8:	88 0f       	add	r24, r24
 2ba:	88 0f       	add	r24, r24
 2bc:	80 7c       	andi	r24, 0xC0	; 192
 2be:	86 0f       	add	r24, r22
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Command>
 2c6:	8a ef       	ldi	r24, 0xFA	; 250
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_Pos+0x14>
	_delay_ms(1);
}
 2ce:	08 95       	ret

000002d0 <Rshift>:
			LCD_Pos(0,3);
			LCD_OutChar(hour2);
		}
	}	
}
void Rshift(void){
 2d0:	df 93       	push	r29
 2d2:	cf 93       	push	r28
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	28 97       	sbiw	r28, 0x08	; 8
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
	int pos[] = {0,4,7,10};
 2e4:	de 01       	movw	r26, r28
 2e6:	11 96       	adiw	r26, 0x01	; 1
 2e8:	ec e0       	ldi	r30, 0x0C	; 12
 2ea:	f1 e0       	ldi	r31, 0x01	; 1
 2ec:	88 e0       	ldi	r24, 0x08	; 8
 2ee:	01 90       	ld	r0, Z+
 2f0:	0d 92       	st	X+, r0
 2f2:	81 50       	subi	r24, 0x01	; 1
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <Rshift+0x1e>
	LCD_Pos(0,pos[p]);	
 2f6:	e0 91 16 01 	lds	r30, 0x0116
 2fa:	f0 91 17 01 	lds	r31, 0x0117
 2fe:	ee 0f       	add	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	ec 0f       	add	r30, r28
 304:	fd 1f       	adc	r31, r29
 306:	61 81       	ldd	r22, Z+1	; 0x01
 308:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
	p++;
 30c:	80 91 16 01 	lds	r24, 0x0116
 310:	90 91 17 01 	lds	r25, 0x0117
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 17 01 	sts	0x0117, r25
 31a:	80 93 16 01 	sts	0x0116, r24
	if(p==4){p=0;}
 31e:	04 97       	sbiw	r24, 0x04	; 4
 320:	21 f4       	brne	.+8      	; 0x32a <Rshift+0x5a>
 322:	10 92 17 01 	sts	0x0117, r1
 326:	10 92 16 01 	sts	0x0116, r1
}
 32a:	28 96       	adiw	r28, 0x08	; 8
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	cf 91       	pop	r28
 338:	df 91       	pop	r29
 33a:	08 95       	ret

0000033c <incrementTime>:
		temp &=0x01; 
	}
}

void incrementTime(void){
	if(p==0){					//APM
 33c:	80 91 16 01 	lds	r24, 0x0116
 340:	90 91 17 01 	lds	r25, 0x0117
 344:	89 2b       	or	r24, r25
 346:	89 f4       	brne	.+34     	; 0x36a <incrementTime+0x2e>
		if(APM==65){APM=80;}
 348:	80 91 1e 01 	lds	r24, 0x011E
 34c:	81 34       	cpi	r24, 0x41	; 65
 34e:	11 f4       	brne	.+4      	; 0x354 <incrementTime+0x18>
 350:	80 e5       	ldi	r24, 0x50	; 80
 352:	01 c0       	rjmp	.+2      	; 0x356 <incrementTime+0x1a>
		else {APM=65;}
 354:	81 e4       	ldi	r24, 0x41	; 65
 356:	80 93 1e 01 	sts	0x011E, r24
		LCD_OutChar(APM);
 35a:	80 91 1e 01 	lds	r24, 0x011E
 35e:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
		LCD_Pos(0,0);
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
	}
	if(p==1){
 36a:	80 91 16 01 	lds	r24, 0x0116
 36e:	90 91 17 01 	lds	r25, 0x0117
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	09 f0       	breq	.+2      	; 0x378 <incrementTime+0x3c>
 376:	4b c0       	rjmp	.+150    	; 0x40e <incrementTime+0xd2>
		if(((hour2==48)&&(hour1<57)) || ((hour2==49) && (hour1<50))){
 378:	90 91 1b 01 	lds	r25, 0x011B
 37c:	90 33       	cpi	r25, 0x30	; 48
 37e:	29 f4       	brne	.+10     	; 0x38a <incrementTime+0x4e>
 380:	80 91 19 01 	lds	r24, 0x0119
 384:	89 33       	cpi	r24, 0x39	; 57
 386:	a0 f4       	brcc	.+40     	; 0x3b0 <incrementTime+0x74>
 388:	07 c0       	rjmp	.+14     	; 0x398 <incrementTime+0x5c>
 38a:	91 33       	cpi	r25, 0x31	; 49
 38c:	09 f0       	breq	.+2      	; 0x390 <incrementTime+0x54>
 38e:	3f c0       	rjmp	.+126    	; 0x40e <incrementTime+0xd2>
 390:	80 91 19 01 	lds	r24, 0x0119
 394:	82 33       	cpi	r24, 0x32	; 50
 396:	20 f5       	brcc	.+72     	; 0x3e0 <incrementTime+0xa4>
			hour1++;
 398:	80 91 19 01 	lds	r24, 0x0119
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	80 93 19 01 	sts	0x0119, r24
			LCD_Pos(0,4);
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	64 e0       	ldi	r22, 0x04	; 4
 3a6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
			LCD_OutChar(hour1);
 3aa:	80 91 19 01 	lds	r24, 0x0119
 3ae:	15 c0       	rjmp	.+42     	; 0x3da <incrementTime+0x9e>
		}
		else if((hour2==48)&&(hour1==57)){
 3b0:	89 33       	cpi	r24, 0x39	; 57
 3b2:	69 f5       	brne	.+90     	; 0x40e <incrementTime+0xd2>
			hour2 = 49;
 3b4:	81 e3       	ldi	r24, 0x31	; 49
 3b6:	80 93 1b 01 	sts	0x011B, r24
			hour1 = 48;
 3ba:	90 93 19 01 	sts	0x0119, r25
			LCD_Pos(0,4);	
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	64 e0       	ldi	r22, 0x04	; 4
 3c2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
			LCD_OutChar(hour1);
 3c6:	80 91 19 01 	lds	r24, 0x0119
 3ca:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
			LCD_Pos(0,3);
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
			LCD_OutChar(hour2);
 3d6:	80 91 1b 01 	lds	r24, 0x011B
 3da:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
 3de:	08 95       	ret
		}
		else if((hour2==49)&&(hour1==50)){
 3e0:	82 33       	cpi	r24, 0x32	; 50
 3e2:	a9 f4       	brne	.+42     	; 0x40e <incrementTime+0xd2>
			hour2=48;
 3e4:	80 e3       	ldi	r24, 0x30	; 48
 3e6:	80 93 1b 01 	sts	0x011B, r24
			hour1=49;
 3ea:	90 93 19 01 	sts	0x0119, r25
			LCD_Pos(0,4);	
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	64 e0       	ldi	r22, 0x04	; 4
 3f2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
			LCD_OutChar(hour1);
 3f6:	80 91 19 01 	lds	r24, 0x0119
 3fa:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
			LCD_Pos(0,3);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	63 e0       	ldi	r22, 0x03	; 3
 402:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
			LCD_OutChar(hour2);
 406:	80 91 1b 01 	lds	r24, 0x011B
 40a:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
 40e:	08 95       	ret

00000410 <ReadRow>:
	}	
}

void ReadRow(void){
	unsigned char temp=0;
	char tmp = PINC;
 410:	83 b3       	in	r24, 0x13	; 19
	tmp &= 0x7F;
 412:	8f 77       	andi	r24, 0x7F	; 127
	
	if(tmp == 0x79){		//1
 414:	89 37       	cpi	r24, 0x79	; 121
 416:	19 f4       	brne	.+6      	; 0x41e <ReadRow+0xe>
		incrementTime();
 418:	0e 94 9e 01 	call	0x33c	; 0x33c <incrementTime>
 41c:	0c c0       	rjmp	.+24     	; 0x436 <ReadRow+0x26>
	}
	else if(tmp == 0x7C){	//2
 41e:	8c 37       	cpi	r24, 0x7C	; 124
 420:	51 f0       	breq	.+20     	; 0x436 <ReadRow+0x26>
		decrementTime();
	}
	else if(tmp == 0x6D){	//3
 422:	8d 36       	cpi	r24, 0x6D	; 109
 424:	19 f4       	brne	.+6      	; 0x42c <ReadRow+0x1c>
		Rshift();	
 426:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Rshift>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <ReadRow+0x26>
	}
	else if(tmp == 0x73){	//42=*
 42c:	83 37       	cpi	r24, 0x73	; 115
 42e:	19 f4       	brne	.+6      	; 0x436 <ReadRow+0x26>
		exit = 1; 
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 15 01 	sts	0x0115, r24
	}
	
	while(!temp) 	//wait until the interrupt becomes high (print once when pressed once)
 436:	80 9b       	sbis	0x10, 0	; 16
 438:	fe cf       	rjmp	.-4      	; 0x436 <ReadRow+0x26>
	{
		temp=PIND;
		temp &=0x01; 
	}
}
 43a:	08 95       	ret

0000043c <ReadCol>:
			PORTC = 0xEF;	//set col3 back to 0
		}
	}
}

void ReadCol(void){
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
	LCD_Pos(0,0);//default position
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>

	while(1){
		PORTC = 0xFB;
 44a:	2b ef       	ldi	r18, 0xFB	; 251
 44c:	f2 2e       	mov	r15, r18
		if(exit == 1){
			exit = 0;
			break;
		}
		
		PORTC = 0xFE;
 44e:	0e ef       	ldi	r16, 0xFE	; 254
		if(exit == 1){
			exit = 0;
			break;
		}

		PORTC = 0xEF;
 450:	1f ee       	ldi	r17, 0xEF	; 239

void ReadCol(void){
	LCD_Pos(0,0);//default position

	while(1){
		PORTC = 0xFB;
 452:	f5 ba       	out	0x15, r15	; 21
		ReadRow();
 454:	0e 94 08 02 	call	0x410	; 0x410 <ReadRow>
		if(exit == 1){
 458:	80 91 15 01 	lds	r24, 0x0115
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	71 f0       	breq	.+28     	; 0x47c <ReadCol+0x40>
			exit = 0;
			break;
		}
		
		PORTC = 0xFE;
 460:	05 bb       	out	0x15, r16	; 21
		ReadRow();
 462:	0e 94 08 02 	call	0x410	; 0x410 <ReadRow>
		if(exit == 1){
 466:	80 91 15 01 	lds	r24, 0x0115
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	39 f0       	breq	.+14     	; 0x47c <ReadCol+0x40>
			exit = 0;
			break;
		}

		PORTC = 0xEF;
 46e:	15 bb       	out	0x15, r17	; 21
		ReadRow();
 470:	0e 94 08 02 	call	0x410	; 0x410 <ReadRow>
		if(exit == 1){
 474:	80 91 15 01 	lds	r24, 0x0115
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	59 f7       	brne	.-42     	; 0x452 <ReadCol+0x16>
			exit = 0;
 47c:	10 92 15 01 	sts	0x0115, r1
			break;
		}	
	}	
}
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	ff 90       	pop	r15
 486:	08 95       	ret

00000488 <__vector_1>:
	SREG = 0x80;
	TIMSK = 0x10; //CTC interrupt enable, ignore else
	TIFR = 0x10; //TCNT1 OCR1A 비교일치 interrupt
}

ISR(INT0_vect){
 488:	1f 92       	push	r1
 48a:	0f 92       	push	r0
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	0f 92       	push	r0
 490:	0b b6       	in	r0, 0x3b	; 59
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	6f 93       	push	r22
 4a0:	7f 93       	push	r23
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
 4ae:	88 ea       	ldi	r24, 0xA8	; 168
 4b0:	91 e6       	ldi	r25, 0x61	; 97
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__vector_1+0x2a>
	_delay_ms(100); //wait until glitches fade out (wait until interrupt becomes stable)

	unsigned char tmp;
	tmp = PIND;
	tmp &=0x01;
	if(tmp == 0){ //flag=1 only if the interrupt pin is low
 4b6:	80 99       	sbic	0x10, 0	; 16
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <__vector_1+0x4e>
		buff=PINC; //read input as soon as the interrupt is called (so read the data within the interrupt function)
 4ba:	83 b3       	in	r24, 0x13	; 19
		buff &=0x7f;
 4bc:	8f 77       	andi	r24, 0x7F	; 127
 4be:	80 93 14 01 	sts	0x0114, r24
		if(buff == 0x67){
 4c2:	87 36       	cpi	r24, 0x67	; 103
 4c4:	41 f4       	brne	.+16     	; 0x4d6 <__vector_1+0x4e>
			TCCR1B = 0x08; //block clock source
 4c6:	88 e0       	ldi	r24, 0x08	; 8
 4c8:	8e bd       	out	0x2e, r24	; 46
			ReadCol();
 4ca:	0e 94 1e 02 	call	0x43c	; 0x43c <ReadCol>
			TCCR1B = 0x0C;	//provide clock source 
 4ce:	8c e0       	ldi	r24, 0x0C	; 12
 4d0:	8e bd       	out	0x2e, r24	; 46
			PORTC = 0xEF;	//set col3 back to 0
 4d2:	8f ee       	ldi	r24, 0xEF	; 239
 4d4:	85 bb       	out	0x15, r24	; 21
		}
	}
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0b be       	out	0x3b, r0	; 59
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <DisplayClock>:
	}
	DisplayClock();
}

void DisplayClock(void){
	LCD_Pos(0,10);
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	6a e0       	ldi	r22, 0x0A	; 10
 500:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
	LCD_OutChar(sec1);
 504:	80 91 1d 01 	lds	r24, 0x011D
 508:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>

	if(TIflag>0){
 50c:	80 91 1a 01 	lds	r24, 0x011A
 510:	88 23       	and	r24, r24
 512:	09 f4       	brne	.+2      	; 0x516 <DisplayClock+0x1a>
 514:	40 c0       	rjmp	.+128    	; 0x596 <DisplayClock+0x9a>
		LCD_Pos(0,9);
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	69 e0       	ldi	r22, 0x09	; 9
 51a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
		LCD_OutChar(sec2);
 51e:	80 91 18 01 	lds	r24, 0x0118
 522:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
		if(TIflag>1){
 526:	80 91 1a 01 	lds	r24, 0x011A
 52a:	82 30       	cpi	r24, 0x02	; 2
 52c:	a0 f1       	brcs	.+104    	; 0x596 <DisplayClock+0x9a>
			LCD_Pos(0,7);
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	67 e0       	ldi	r22, 0x07	; 7
 532:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
			LCD_OutChar(min1);
 536:	80 91 1c 01 	lds	r24, 0x011C
 53a:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
			if(TIflag>2){
 53e:	80 91 1a 01 	lds	r24, 0x011A
 542:	83 30       	cpi	r24, 0x03	; 3
 544:	40 f1       	brcs	.+80     	; 0x596 <DisplayClock+0x9a>
				LCD_Pos(0,6);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	66 e0       	ldi	r22, 0x06	; 6
 54a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
				LCD_OutChar(min2);
 54e:	80 91 1f 01 	lds	r24, 0x011F
 552:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
				if(TIflag >3){
 556:	80 91 1a 01 	lds	r24, 0x011A
 55a:	84 30       	cpi	r24, 0x04	; 4
 55c:	e0 f0       	brcs	.+56     	; 0x596 <DisplayClock+0x9a>
					LCD_Pos(0,4);
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	64 e0       	ldi	r22, 0x04	; 4
 562:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
					LCD_OutChar(hour1);
 566:	80 91 19 01 	lds	r24, 0x0119
 56a:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
					if(TIflag >4){
 56e:	80 91 1a 01 	lds	r24, 0x011A
 572:	85 30       	cpi	r24, 0x05	; 5
 574:	80 f0       	brcs	.+32     	; 0x596 <DisplayClock+0x9a>
						LCD_Pos(0,3);
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	63 e0       	ldi	r22, 0x03	; 3
 57a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
						LCD_OutChar(hour2);
 57e:	80 91 1b 01 	lds	r24, 0x011B
 582:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
						LCD_Pos(0,0);
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Pos>
						LCD_OutChar(APM);
 58e:	80 91 1e 01 	lds	r24, 0x011E
 592:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_OutChar>
					}
				}
			}
		}
	}
	TIflag=0;
 596:	10 92 1a 01 	sts	0x011A, r1
}
 59a:	08 95       	ret

0000059c <CountClock>:
ISR(TIMER1_COMPA_vect){
	CountClock();
}

void CountClock(void){
	sec1++;
 59c:	80 91 1d 01 	lds	r24, 0x011D
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 93 1d 01 	sts	0x011D, r24
	TIflag=0;		//0
 5a6:	10 92 1a 01 	sts	0x011A, r1
	if(sec1 > 57){
 5aa:	8a 33       	cpi	r24, 0x3A	; 58
 5ac:	08 f4       	brcc	.+2      	; 0x5b0 <CountClock+0x14>
 5ae:	65 c0       	rjmp	.+202    	; 0x67a <CountClock+0xde>
		sec1 = 48;
 5b0:	20 e3       	ldi	r18, 0x30	; 48
 5b2:	20 93 1d 01 	sts	0x011D, r18
		sec2++;
 5b6:	80 91 18 01 	lds	r24, 0x0118
 5ba:	8f 5f       	subi	r24, 0xFF	; 255
 5bc:	80 93 18 01 	sts	0x0118, r24
		TIflag++;		//1
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	90 93 1a 01 	sts	0x011A, r25
		if(sec2 > 53){
 5c6:	86 33       	cpi	r24, 0x36	; 54
 5c8:	08 f4       	brcc	.+2      	; 0x5cc <CountClock+0x30>
 5ca:	57 c0       	rjmp	.+174    	; 0x67a <CountClock+0xde>
			sec2 = 48;
 5cc:	20 93 18 01 	sts	0x0118, r18
			min1++;
 5d0:	80 91 1c 01 	lds	r24, 0x011C
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
 5d6:	80 93 1c 01 	sts	0x011C, r24
			TIflag++;		//2
 5da:	92 e0       	ldi	r25, 0x02	; 2
 5dc:	90 93 1a 01 	sts	0x011A, r25
			if(min1 > 57){
 5e0:	8a 33       	cpi	r24, 0x3A	; 58
 5e2:	08 f4       	brcc	.+2      	; 0x5e6 <CountClock+0x4a>
 5e4:	4a c0       	rjmp	.+148    	; 0x67a <CountClock+0xde>
				min1= 48;
 5e6:	20 93 1c 01 	sts	0x011C, r18
				min2++;
 5ea:	80 91 1f 01 	lds	r24, 0x011F
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 1f 01 	sts	0x011F, r24
				TIflag++;	//3
 5f4:	93 e0       	ldi	r25, 0x03	; 3
 5f6:	90 93 1a 01 	sts	0x011A, r25
				if(min2 > 53){
 5fa:	86 33       	cpi	r24, 0x36	; 54
 5fc:	f0 f1       	brcs	.+124    	; 0x67a <CountClock+0xde>
					min2= 48;
 5fe:	20 93 1f 01 	sts	0x011F, r18
					hour1++;
 602:	80 91 19 01 	lds	r24, 0x0119
 606:	8f 5f       	subi	r24, 0xFF	; 255
 608:	80 93 19 01 	sts	0x0119, r24
					TIflag++;	//4
 60c:	94 e0       	ldi	r25, 0x04	; 4
 60e:	90 93 1a 01 	sts	0x011A, r25

					if((hour1 > 57) && (hour2 == 48)){ //when it turns to 10
 612:	8a 33       	cpi	r24, 0x3A	; 58
 614:	60 f0       	brcs	.+24     	; 0x62e <CountClock+0x92>
 616:	80 91 1b 01 	lds	r24, 0x011B
 61a:	80 33       	cpi	r24, 0x30	; 48
 61c:	41 f4       	brne	.+16     	; 0x62e <CountClock+0x92>
						hour1 = 48;
 61e:	80 93 19 01 	sts	0x0119, r24
						hour2 = 49;
 622:	81 e3       	ldi	r24, 0x31	; 49
 624:	80 93 1b 01 	sts	0x011B, r24
						TIflag++;	//5
 628:	85 e0       	ldi	r24, 0x05	; 5
 62a:	80 93 1a 01 	sts	0x011A, r24
					}
					if((hour1 == 50) && (hour2 == 49)){ //when it turns to 12
 62e:	90 91 19 01 	lds	r25, 0x0119
 632:	92 33       	cpi	r25, 0x32	; 50
 634:	91 f4       	brne	.+36     	; 0x65a <CountClock+0xbe>
 636:	80 91 1b 01 	lds	r24, 0x011B
 63a:	81 33       	cpi	r24, 0x31	; 49
 63c:	71 f4       	brne	.+28     	; 0x65a <CountClock+0xbe>
						if(APM == 65){APM=80;}
 63e:	80 91 1e 01 	lds	r24, 0x011E
 642:	81 34       	cpi	r24, 0x41	; 65
 644:	11 f4       	brne	.+4      	; 0x64a <CountClock+0xae>
 646:	80 e5       	ldi	r24, 0x50	; 80
 648:	01 c0       	rjmp	.+2      	; 0x64c <CountClock+0xb0>
						else{APM=65;}
 64a:	81 e4       	ldi	r24, 0x41	; 65
 64c:	80 93 1e 01 	sts	0x011E, r24
						TIflag++;
 650:	80 91 1a 01 	lds	r24, 0x011A
 654:	8f 5f       	subi	r24, 0xFF	; 255
 656:	80 93 1a 01 	sts	0x011A, r24
					}
					if((hour2 == 49) && (hour1 >50)){//from 12 to 1
 65a:	80 91 1b 01 	lds	r24, 0x011B
 65e:	81 33       	cpi	r24, 0x31	; 49
 660:	61 f4       	brne	.+24     	; 0x67a <CountClock+0xde>
 662:	93 33       	cpi	r25, 0x33	; 51
 664:	50 f0       	brcs	.+20     	; 0x67a <CountClock+0xde>
						hour1 = 49;
 666:	80 93 19 01 	sts	0x0119, r24
						hour2 = 48;
 66a:	80 e3       	ldi	r24, 0x30	; 48
 66c:	80 93 1b 01 	sts	0x011B, r24
						TIflag++;
 670:	80 91 1a 01 	lds	r24, 0x011A
 674:	8f 5f       	subi	r24, 0xFF	; 255
 676:	80 93 1a 01 	sts	0x011A, r24
					}	
				}
			}
		}
	}
	DisplayClock();
 67a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DisplayClock>
}
 67e:	08 95       	ret

00000680 <__vector_12>:
	while(1){	
		OCR1A = 31250; 
	}
}

ISR(TIMER1_COMPA_vect){
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	0b b6       	in	r0, 0x3b	; 59
 68a:	0f 92       	push	r0
 68c:	11 24       	eor	r1, r1
 68e:	2f 93       	push	r18
 690:	3f 93       	push	r19
 692:	4f 93       	push	r20
 694:	5f 93       	push	r21
 696:	6f 93       	push	r22
 698:	7f 93       	push	r23
 69a:	8f 93       	push	r24
 69c:	9f 93       	push	r25
 69e:	af 93       	push	r26
 6a0:	bf 93       	push	r27
 6a2:	ef 93       	push	r30
 6a4:	ff 93       	push	r31
	CountClock();
 6a6:	0e 94 ce 02 	call	0x59c	; 0x59c <CountClock>
}
 6aa:	ff 91       	pop	r31
 6ac:	ef 91       	pop	r30
 6ae:	bf 91       	pop	r27
 6b0:	af 91       	pop	r26
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	7f 91       	pop	r23
 6b8:	6f 91       	pop	r22
 6ba:	5f 91       	pop	r21
 6bc:	4f 91       	pop	r20
 6be:	3f 91       	pop	r19
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0b be       	out	0x3b, r0	; 59
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <SevenSeg_init>:
	LCD_Command(0x80 |(row*0x40+col));
	_delay_ms(1);
}

void SevenSeg_init(void){
	DDRD = 0xFE;
 6d0:	8e ef       	ldi	r24, 0xFE	; 254
 6d2:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xFF;
 6d4:	8f ef       	ldi	r24, 0xFF	; 255
 6d6:	82 bb       	out	0x12, r24	; 18
}
 6d8:	08 95       	ret
